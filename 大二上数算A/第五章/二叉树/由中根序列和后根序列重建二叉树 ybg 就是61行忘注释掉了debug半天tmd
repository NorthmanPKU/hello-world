#include <iostream>
#include <string>
#include <cmath>
#include<algorithm>
#include<memory.h>
#include <queue>
using namespace std;
#define M 66000
int backseq[2*M]={0};
int midseq[2*M]={0};

struct node{
	int val;
	node* left;
	node* right;
};

node* build(int mi,int mj,int bi,int bj){
	if(mi>mj||bi>bj) return NULL;
	if(mi==mj){
		node* root=new node{backseq[bj],NULL,NULL};
		return root;
	}
	node* root=new node{backseq[bj],NULL,NULL};
	int ii=mi;
	while(midseq[ii]!=backseq[bj]&&ii<=mj) ii++;
	root->right=build(ii+1, mj, bj-(mj-ii), bj-1);
	root->left=build(mi, ii-1, bi, bj-(mj-ii)-1);
	return root;
}

void front_traversal(node* root){
	if(root)
	cout<<root->val<<" ";
	else return;
	if(root->left)
	front_traversal(root->left);
	if(root->right)
	front_traversal(root->right);
	return;
}

int main(){
	int cnt=0;
	char c=0;
	int nenter=0;
	
	while(nenter<1){
		cin>>midseq[cnt++];
		c=getchar();
		if(c!=' ') nenter++;
	};
	cnt=0;
	while(nenter<2){
		cin>>backseq[cnt++];
		c=getchar();
		if(c!=' ') nenter++;
	};
	node* root=build(0, cnt-1, 0, cnt-1);
	front_traversal(root);
	//cout<<1;
	
	return 0;
}
