#include<iostream>
#include<algorithm>
#define MAX_N 1000
using namespace std;
long long a[MAX_N][MAX_N] = { 0 };//迷宫
int x0 = 0, y00 = 0;//x0为初始行，y00为初始列
int fw[4] = { 2,3,5,7 };//左 上 右 下 对应素数。每个二维数组的值若是某个素数的倍数则说明同方向地来过
int dx[] = { 0,-1,0,1 },dy[] = { -1,0,1,0 };//位移用，分别对应向左上右下

void func(int toward,int x,int y) {
    if (a[x][y] == -1) { cout << "YES"<<endl; return; }//若找到道具 输出
    if (a[x][y] % fw[toward] == 0&&a[x][y]>1) {//若这里来过，当时方向也一样，说明无法找到道具
        cout << "NO"<<endl;
        return;
    }
    a[x][y] *= fw[toward];//第一次来一个地方，乘一下对应素数证明这地方它曾经来过
    if (a[x + dx[(toward + 3) % 4]][y + dy[(toward + 3) % 4]] != 0)//若左手边可走，左转
        func((toward + 3) % 4, x + dx[(toward + 3) % 4], y + dy[(toward + 3) % 4]);
    else {//左手边不可走，继续
        int whetherTheTeacherHaveMother=0;
        while (a[x + dx[toward]][y + dy[toward]] == 0) {//若面前是墙，右转直到不是墙
            if(whetherTheTeacherHaveMother>4) {cout<<"NO"<<endl;return;}
            toward = (toward + 1) % 4;
            whetherTheTeacherHaveMother++;
        }
        func(toward, x + dx[toward], y + dy[toward]);//向前走
    }
}
int dbcnt=0,inith=0;
int main()
{
    
    int h = 0, l = 0;//获得行列数
    bool whetherTheTeacherHaveMother=0;
    while(cin >> h >> l){
        dbcnt++;
        if(dbcnt==1) inith=h;
    char tem = '\0';//下面每次用tem暂时输入
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < l; j++) {
            cin >> tem;
            if (tem == '.') a[i][j] = 1;//是路，定为1
            else if (tem == 'S') {//是起点，定为1，记录位置
                x0 = i;
                y00 = j;
                a[i][j] = 37;
            }
            else if (tem == 'T') {//是道具，定为-1
                a[i][j] = -1;
                whetherTheTeacherHaveMother=1;
            }
            else if (tem == '#') a[i][j] = 0;//墙定为0
            tem = '\0';
        }
    }
        
    char t;
    cin >> t;//再用tem读入方向
        if(!whetherTheTeacherHaveMother){
            cout<<"NO"<<endl;
            whetherTheTeacherHaveMother=0;
            continue;
        }
    int to0;//将方向翻译为数字
    switch (t) {
        case 'N':to0 = 1; break;
        case 'W':to0 = 0; break;
        case 'E':to0 = 2; break;
        default :to0 = 3; break;
    }

    func(to0, x0, y00);//开始寻找

    }

    return 0;
}
